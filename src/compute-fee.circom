include "../node_modules/circomlib/circuits/bitify.circom";

include "./lib/mux256.circom";

/**
 * Computes the final amount of fee to apply given the fee selector
 * @input feeSel - {Uint8} - fee selector
 * @input amount - {Uint128} - amount to apply the fee factor
 * @input applyFee - {Bool} - determines if fee needs to be computed or if it is 0
 * @output feeOut - {Uint128} - amount*feeFactor
 */
template ComputeFee() {
    signal input feeSel;
    signal input amount;
    signal input applyFee;

    signal output feeOut;

    var i = 0;
    component mux256 = Mux256();

    // set mux256 selectors
    component n2bFeeSel = Num2Bits(8);
    n2bFeeSel.in <== feeSel;

    for (i = 0; i < 8; i++) {
        mux256.s[i] <== n2bFeeSel.out[i]*applyFee;
    }

    // set mux256 inputs
    for (i = 0; i < 256; i++) {
        mux256.in[i] <== feeShiftTable(i);
    }

    // set amount*feeFactor
    // feeFactor is the output of the mux256
    // feeFactor could be shifted or not
    // overflow could not be achieved since:
    // - maxTransferAmount is '343597383670000000000000000000000000000000' since amountF max value is 0xFFFFFFFFFF
    // - maxAmountTransfer bits length is 138
    // - maxShiftedFeeValue = feeShiftTable(191) with bit length 60
    // - maxNonShiftedFeeValue = feeShiftTable(255) with bit length 63
    // - bitLength(maxTransferAmount) + bitLength(maxShiftedFeeValue) = 198 < 253
    // - bitLength(maxTransferAmount) + bitLength(maxNonShiftedFeeValue) = 201 < 253
    signal feeOutNotShifted;
    feeOutNotShifted <== mux256.out*amount;

    // do not apply shift if feeSelector > 192
    signal applyShift;
    applyShift <== 1 - (n2bFeeSel.out[6] * n2bFeeSel.out[7]);

    // store bits of 'feeOutNotShifted'
    signal bitsFeeOut[253];

    // It is used a custom 'num2bits' implementation in order to save consraints since it is computed at the same
    // time the shifted feeOut and the non-shifted feeOut
    var bitsShiftPrecision = 60;

    var lcIn = 0;                   // linear combination value stored on 'bitsFeeOut'
    var lcNotShifted = 0;           // feeOut if feeSel >= 192. Took from 'bitsFeeOut[0]...bitsFeeOut[127]'
    var lcShifted = 0;              // feeOut if feeSel < 192. Took from 'bitsFeeOut[bitsShiftPrecision]...bitsFeeOut[bitsShiftPrecision + 127]'
    var lcOverflowNotShifted = 0;   // check overflow if feeSel >= 192. Took from 'bitsFeeOut[128]...bitsFeeOut[252]'
    var lcOverflowShifted = 0;      // check overflow if feeSel < 192. Took from 'bitsFeeOut[bitsShiftPrecision + 128]...bitsFeeOut[252]'

    // computes:
    //  - amount * feeFactor
    //  - amount * (feeFactor << bitsShiftPrecision)
    for (var i = 0; i < 253; i++) {
        bitsFeeOut[i] <-- (feeOutNotShifted >> i) & 1;
        bitsFeeOut[i] * (bitsFeeOut[i] -1) === 0;
        lcIn += (2**i)*bitsFeeOut[i];
        if (i >= bitsShiftPrecision) {
            if (i < bitsShiftPrecision+128) {
                lcShifted += 2**(i-bitsShiftPrecision) * bitsFeeOut[i];
            } else {
                lcOverflowShifted += bitsFeeOut[i];
            }
        }
        if (i < 128) {
            lcNotShifted += (2**i)*bitsFeeOut[i];
        } else {
            lcOverflowNotShifted += bitsFeeOut[i];
        }
    }

    // check binary representeation of 'feeOutNotShifted' matches its value
    lcIn === feeOutNotShifted;

    // checks overflow of 128 bits
    // it is performed a sanity check for shifted 'feeFactor'
    // - max shifted 'feeFactor' is 'feeShiftTable(191)'
    // - (feeShiftTable(191) >> bitsShiftPrecision) = 2**(-0.05) < 1
    // - max computed fee would not overflow since 'maxTransferAmount' < 2**128
    applyShift * lcOverflowShifted === 0;
    (1 - applyShift) * lcOverflowNotShifted === 0;

    feeOut <== applyShift*(lcShifted - lcNotShifted) + lcNotShifted;
}

/**
 * Fee table hardcoded values
 * Table:
 * - (fee2Apply) * 2**bitsShift for i < 192
 * - (fee2Apply) for i < 192
 * Chosen bitShift = 60, which is the minimum value to have precision for each fee applied (if fee selected < 192)
 * Further details could be found in https://docs.hermez.io/#/developers/protocol/hermez-protocol/fee-table?id=transaction-fee-table
 * @output out - {Array[Fields]} - Table containing all fees represented as: Fee * (2**bitsShift)
 */
function feeShiftTable(i) {
    var out[256] = [0,3,9,29,90,279,861,2655,8192,25267,77935,240387,741455,2286960,7053950,21757357,67108864,206992033,638450708,1969251187,6074000999,18734780191,57785961645,178236271212,549755813888,1695678735018,5230188203117,16132105731538,49758216191607,153475319327371,473382597799226,1460111533771401,4503599627370496,4662418725241772,4826838566504035,4997056660946426,5173277483525749,5355712719992597,5544581521179432,5740110766256133,5942535335269230,6152098391292193,6369051672525772,6593655794699191,6826180564135515,7066905301857248,7316119179121470,7574121564787630,7841222384935199,8117742495163242,8404014066019092,8700380982019120,9007199254740992,9324837450483544,9653677133008070,9994113321892852,10346554967051498,10711425439985194,11089163042358864,11480221532512266,11885070670538460,12304196782584386,12738103345051544,13187311589398382,13652361128271030,14133810603714496,14632238358242940,15148243129575260,15682444769870398,16235484990326484,16808028132038184,17400761964038240,18014398509481984,18649674900967100,19307354266016140,19988226643785704,20693109934102996,21422850879970388,22178326084717744,22960443065024532,23770141341076920,24608393565168772,25476206690103088,26374623178796784,27304722256542060,28267621207428992,29264476716485880,30296486259150520,31364889539740816,32470969980652968,33616056264076368,34801523928076480,36028797018963968,37299349801934200,38614708532032280,39976453287571408,41386219868205992,42845701759940776,44356652169435488,45920886130049064,47540282682153840,49216787130337544,50952413380206176,52749246357593568,54609444513084120,56535242414857984,58528953432971760,60592972518301040,62729779079481632,64941939961305936,67232112528152736,69603047856152960,72057594037927936,74598699603868352,77229417064064608,79952906575142816,82772439736411984,85691403519881552,88713304338870912,91841772260098192,95080565364307680,98433574260675088,101904826760412352,105498492715187056,109218889026168304,113070484829715968,117057906865943520,121185945036602080,125459558158963264,129883879922611968,134464225056305472,139206095712305920,144115188075855872,149197399207736800,154458834128129216,159905813150285632,165544879472823968,171382807039763104,177426608677741952,183683544520196384,190161130728615360,196867148521350176,203809653520824704,210996985430374272,218437778052336608,226140969659431936,234115813731887040,242371890073204160,250919116317926528,259767759845223936,268928450112610944,278412191424611840,288230376151711744,298394798415473600,308917668256258432,319811626300571264,331089758945647936,342765614079526208,354853217355483904,367367089040392768,380322261457230720,393734297042700352,407619307041649408,421993970860748544,436875556104673216,452281939318863872,468231627463774080,484743780146408320,501838232635853056,519535519690447872,537856900225221888,556824382849223680,576460752303423488,596789596830947200,617835336512516864,639623252601142528,662179517891295872,685531228159052416,709706434710967808,734734178080785536,760644522914461440,787468594085400704,815238614083298816,843987941721497088,873751112209346432,904563878637727744,936463254927548160,969487560292816640,1003676465271706112,1039071039380895744,1075713800450443776,1113648765698447360,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,2147483648,4294967296,8589934592,17179869184,34359738368,68719476736,137438953472,274877906944,549755813888,1099511627776,2199023255552,4398046511104,8796093022208,17592186044416,35184372088832,70368744177664,140737488355328,281474976710656,562949953421312,1125899906842624,2251799813685248,4503599627370496,9007199254740992,18014398509481984,36028797018963968,72057594037927936,144115188075855872,288230376151711744,576460752303423488,1152921504606846976,2305843009213693952,4611686018427387904,9223372036854775808];

    return out[i];
}
